# Generated by Django 5.2.4 on 2025-08-14 09:44

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0004_add_ai_content_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScrapingSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('website', models.CharField(choices=[('alibaba', 'Alibaba B2B'), ('globaltrade', 'GlobalTrade.net'), ('etsy', 'Etsy')], max_length=20, unique=True)),
                ('base_url', models.URLField()),
                ('enabled', models.BooleanField(default=True)),
                ('scrape_frequency_hours', models.IntegerField(default=24, help_text='How often to scrape (in hours)')),
                ('max_items_per_scrape', models.IntegerField(default=50)),
                ('request_delay_seconds', models.FloatField(default=2.0, help_text='Delay between requests')),
                ('user_agent', models.CharField(default='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36', max_length=300)),
                ('scraping_config', models.JSONField(default=dict, help_text='CSS selectors and scraping rules')),
                ('last_scraped', models.DateTimeField(blank=True, null=True)),
                ('last_success', models.DateTimeField(blank=True, null=True)),
                ('consecutive_failures', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scraping Source',
                'verbose_name_plural': 'Scraping Sources',
            },
        ),
        migrations.CreateModel(
            name='ScrapedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(help_text='ID from the source website', max_length=200)),
                ('url', models.URLField()),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('price', models.CharField(blank=True, max_length=100)),
                ('category', models.CharField(blank=True, max_length=200)),
                ('tags', models.CharField(blank=True, max_length=500)),
                ('image_urls', models.JSONField(default=list, help_text='List of image URLs')),
                ('views', models.IntegerField(blank=True, null=True)),
                ('likes', models.IntegerField(blank=True, null=True)),
                ('sales', models.IntegerField(blank=True, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('raw_data', models.JSONField(default=dict, help_text='Full scraped data')),
                ('content_generated', models.BooleanField(default=False)),
                ('scraped_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_generation_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.contentgenerationrequest')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraped_items', to='blog.scrapingsource')),
            ],
            options={
                'ordering': ['-scraped_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('started', 'Started'), ('success', 'Success'), ('partial', 'Partial Success'), ('failed', 'Failed')], max_length=20)),
                ('items_found', models.IntegerField(default=0)),
                ('items_new', models.IntegerField(default=0)),
                ('items_updated', models.IntegerField(default=0)),
                ('items_failed', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('error_traceback', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='blog.scrapingsource')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TrendingTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=200)),
                ('category', models.CharField(blank=True, max_length=200)),
                ('frequency', models.IntegerField(default=1, help_text='How often this topic appears')),
                ('total_views', models.BigIntegerField(default=0)),
                ('total_sales', models.BigIntegerField(default=0)),
                ('average_rating', models.FloatField(blank=True, null=True)),
                ('sample_items', models.JSONField(default=list, help_text='Sample scraped items for this topic')),
                ('content_generated', models.BooleanField(default=False)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('content_generation_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.contentgenerationrequest')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.scrapingsource')),
            ],
            options={
                'ordering': ['-frequency', '-total_views'],
            },
        ),
        migrations.CreateModel(
            name='ContentGenerationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('product_review', 'Product Review'), ('trend_analysis', 'Trend Analysis'), ('market_insights', 'Market Insights'), ('buyer_guide', 'Buyer Guide'), ('price_comparison', 'Price Comparison')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('context_data', models.JSONField(default=dict, help_text='Additional context for content generation')),
                ('processed', models.BooleanField(default=False)),
                ('scheduled_for', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.contentgenerationrequest')),
                ('target_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.category')),
                ('scraped_items', models.ManyToManyField(blank=True, to='blog.scrapeddata')),
                ('trending_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.trendingtopic')),
            ],
            options={
                'ordering': ['-priority', 'scheduled_for'],
            },
        ),
        migrations.AddIndex(
            model_name='scrapeddata',
            index=models.Index(fields=['source', 'content_generated'], name='blog_scrape_source__ac3c86_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapeddata',
            index=models.Index(fields=['scraped_at'], name='blog_scrape_scraped_8ebb94_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapeddata',
            index=models.Index(fields=['category'], name='blog_scrape_categor_e78c32_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='scrapeddata',
            unique_together={('source', 'external_id')},
        ),
        migrations.AlterUniqueTogether(
            name='trendingtopic',
            unique_together={('source', 'topic', 'category')},
        ),
    ]
